name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.2', '8.3']
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          tools: composer:v2
          extensions: mbstring, json, dom, curl, pdo, sqlite, pdo_sqlite

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ matrix.php }}-

      - name: Install dependencies
        run: |
          composer config --no-plugins allow-plugins.infection/extension-installer true
          composer install --no-interaction --prefer-dist --no-progress

      - name: Lint (Pint)
        run: |
          if [ -f vendor/bin/pint ]; then vendor/bin/pint --test; fi

      - name: Static Analysis (PHPStan)
        run: |
          if [ -f phpstan.neon.dist ]; then vendor/bin/phpstan analyse --no-progress; fi

      - name: Static Analysis (Psalm)
        run: |
          if [ -f psalm.xml ] || [ -f psalm.xml.dist ]; then vendor/bin/psalm --output-format=compact || true; fi

      - name: Run tests (no coverage)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
          XPRESSWALLET_EMAIL: dummy@example.com
          XPRESSWALLET_PASSWORD: password
        run: vendor/bin/pest -v --colors=always

  coverage:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup PHP 8.3 with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          coverage: xdebug
          tools: composer:v2
          extensions: mbstring, json, dom, curl, pdo, sqlite, pdo_sqlite
      - name: Install dependencies
        run: |
          composer config --no-plugins allow-plugins.infection/extension-installer true
          composer install --no-interaction --prefer-dist --no-progress
      - name: Run tests with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
          XPRESSWALLET_EMAIL: dummy@example.com
          XPRESSWALLET_PASSWORD: password
        run: |
          vendor/bin/pest --coverage --min=70 --colors=always
      - name: Mutation testing (Infection)
        run: |
          php -d xdebug.mode=coverage vendor/bin/infection --threads=4 --min-msi=55 --min-covered-msi=65 || true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}